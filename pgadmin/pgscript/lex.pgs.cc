#include "pgAdmin3.h"


#line 2 "pgscript/lex.pgs.cc"

#line 4 "pgscript/lex.pgs.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer pgsFlexLexer

#ifdef yyalloc
#define pgsalloc_ALREADY_DEFINED
#else
#define yyalloc pgsalloc
#endif

#ifdef yyrealloc
#define pgsrealloc_ALREADY_DEFINED
#else
#define yyrealloc pgsrealloc
#endif

#ifdef yyfree
#define pgsfree_ALREADY_DEFINED
#else
#define yyfree pgsfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include "pgscript/FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[444] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      138,  114,  111,  113,  112,   61,   64,   50,   51,   59,
       58,   55,   57,   54,   60,   35,   49,   46,   62,   43,
       63,   34,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   52,   53,   47,   48,  114,  130,  129,  128,  130,
      122,  121,  120,  122,  115,  118,  119,  122,  122,  117,
      126,  125,  124,  126,  136,  135,  134,  133,  136,  111,
       48,    0,   36,    2,   38,   35,    0,   53,   47,   52,
       41,   45,   42,   34,    0,    0,    0,   11,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,    8,    0,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   44,  127,
        0,  116,    3,    0,  123,  131,  132,    0,    1,    0,
       36,    0,    0,   37,    0,    0,    0,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       56,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       36,    0,    0,   38,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,   75,    0,   26,
        0,    0,    0,    0,   81,    9,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,   90,   91,   92,    0,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  104,    0,    0,
       27,   17,    0,    0,    0,    0,    0,    0,    0,    0,
       36,   65,   66,    0,    0,   32,    5,    0,   71,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   86,   87,    0,    0,   16,    0,
        0,    0,   14,    0,    0,    0,   24,    0,    0,   98,
        0,    0,    0,    0,    0,    0,   30,  105,    0,    0,
        0,    0,    0,    0,    0,    4,    0,   12,    0,    0,
        0,    0,    0,   74,    0,   76,    0,    0,    0,   79,
        0,    0,    0,    0,    0,   88,    0,   89,   93,    0,
        0,   20,    0,    0,    0,    6,   99,   18,    0,    0,
      102,   23,    0,    0,  108,  109,  110,    0,   67,    0,
        0,    0,   72,   15,   73,    0,    0,    0,   78,   80,

        0,    0,   84,   85,   21,   94,    0,    0,   96,   97,
        0,    0,    0,    0,   10,    0,    0,    0,    7,   28,
        0,    0,    0,   83,   95,    0,  100,    0,  106,  107,
        0,    0,    0,    0,   31,   82,   29,  101,   68,   69,
       70,   77,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    6,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,    6,   34,   35,   36,   37,   38,   39,
        6,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,    6,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,    6,   61,   62,   63,   64,
       65,   66,    6,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,    1,   77,   78,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1
    } ;

static const flex_int16_t yy_base[453] =
    {   0,
        0,    0,   76,   77,   87,  103,   80,   88,   96,  106,
      855,  856,   82,  856,  856,  831,  856,  856,  856,  856,
      856,  856,  838,  828,  811,  101,  799,  856,  113,  856,
      798,    0,   90,   93,  113,  130,  104,  111,  124,  139,
      141,   96,  135,  141,  143,  156,  173,  171,  156,  162,
      184,  856,  856,  856,  856,  797,  856,  856,  856,  799,
      856,  856,  856,  805,  856,  856,  856,  789,  791,  856,
      856,  856,  856,  792,  856,  856,  856,  775,    0,  122,
      856,  548,  170,  856,  189,  212,  222,  856,  856,  856,
      856,  856,  856,    0,  179,  181,  199,  192,  203,  210,

      205,  218,  210,  220,  220,  210,  237,  217,  225,  224,
      239,  242,  227,  235,  856,  252,  856,  246,  264,  268,
      256,  260,  856,  274,  310,  271,  274,  267,  277,  279,
      317,  285,  316,  288,  298,  320,  298,  323,  856,  856,
      318,  856,  856,  317,  856,  856,  856,  315,  856,  348,
      342,  362,  298,  295,  325,  344,  350,  856,  358,  355,
      364,  348,  364,  352,  353,  352,  360,  355,  352,  376,
      373,  368,  369,  376,  379,  368,  379,  308,  382,  375,
      384,  384,  382,  396,  398,  410,  399,  414,  409,  415,
      412,  408,  411,  414,  412,  422,  424,  419,  428,  429,

      416,  422,  428,  427,  434,  435,  276,  420,  427,  440,
      450,  445,  456,  462,  471,  454,  455,  457,  466,  195,
      166,  489,  129,  124,  461,  465,  462,  470,  474,  478,
      856,  479,  485,  473,  480,  488,  485,  856,  477,  485,
      494,  506,  491,  509,  856,  856,  533,  504,  524,  518,
      856,  510,  513,  524,  516,  530,  856,  856,  856,  532,
      538,  522,  856,  524,  526,  527,  522,  541,  545,  529,
      532,  539,  544,  557,  546,  560,  599,  856,  546,  566,
      856,  856,  577,  565,  565,  566,  582,  583,  587,  119,
      111,  856,  856,  569,  576,  126,  856,  580,  856,  591,

      584,  585,  582,  588,  597,  594,  590,  589,  603,  595,
      597,  601,  599,  609,  856,  856,  608,  628,  856,  621,
      613,  621,  856,  630,  637,  638,  856,  641,  630,  856,
      635,  644,  645,  650,  638,  636,  856,  856,  648,  655,
      639,  653,  647,  645,  651,  856,  662,  856,  691,  657,
      656,  663,  669,  856,  669,  856,  678,  688,  688,  856,
      691,  695,  681,  695,  688,  856,  686,  856,  856,  698,
      697,  856,  692,  684,  703,  856,  856,  856,  707,  702,
      856,  856,  695,  711,  856,  856,  856,  703,  856,  705,
      711,  717,  856,  856,  856,  729,  736,  741,  101,  856,

      731,  735,  856,  856,  856,  856,  734,  746,  856,  856,
      740,  738,  749,  742,  856,  755,  741,  745,  856,  856,
      741,  787,  745,  856,  856,  758,  856,  746,  856,  856,
      753,  757,  752,  768,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  824,  828,  832,  836,   97,  838,  840,
      844,  848
    } ;

static const flex_int16_t yy_def[453] =
    {   0,
      443,    1,  444,  444,  445,  445,  446,  446,  447,  447,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  448,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  449,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  450,  443,  443,  443,  443,  451,  443,
      443,  452,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  448,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      449,  443,  443,  450,  443,  443,  443,  452,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,    0,  443,  443,  443,  443,  443,  443,  443,
      443,  443
    } ;

static const flex_int16_t yy_nxt[935] =
    {   0,
       12,   13,   14,   13,   15,   12,   12,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   12,   40,   12,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   12,   12,   12,   52,   12,
       53,   33,   34,   35,   36,   37,   38,   39,   12,   40,
       12,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   12,   12,   12,   54,   55,   56,   58,   58,
       59,   59,   72,   80,   73,   80,   74,   60,   60,   62,
       72,   63,   73,   64,   74,   65,   66,   67,   76,   94,

       77,   68,  422,   69,   78,   62,   70,   63,   76,   64,
       77,   65,   66,   67,   78,   95,   85,   68,   86,   69,
       89,   99,   70,   80,   96,   80,   97,  349,  291,   87,
       98,   90,  100,  121,   91,   92,  291,  101,  110,  113,
      111,  224,   95,  114,  102,   79,  224,  103,   99,  112,
      104,   96,  105,   97,  106,   79,   87,   98,  107,  100,
      121,  115,  108,  116,  101,  110,  113,  111,  117,  109,
      114,  102,  122,  119,  103,  118,  112,  104,  120,  105,
      123,  106,  124,  221,  125,  107,  136,   83,  115,  108,
      116,  126,  134,  127,  135,  117,  109,  128,  150,  122,

      119,  129,  118,  132,  130,  120,  151,  123,  137,  124,
      133,  125,  221,  136,  131,  138,  155,  152,  126,  134,
      127,  135,  156,  157,  128,  150,  158,   85,  129,   86,
      132,  130,  159,  160,  153,  137,  153,  133,  161,  154,
       87,  131,  138,  155,  152,  162,  163,  164,  170,  156,
      157,  171,  165,  158,  166,  167,  168,  175,  169,  159,
      160,  172,  176,  173,  177,  161,  178,   87,  181,  182,
      179,  174,  162,  163,  164,  170,  183,  277,  171,  165,
      180,  166,  167,  168,  175,  169,  184,  185,  172,  176,
      173,  177,  188,  178,  189,  181,  182,  179,  174,  190,

      186,  191,  192,  183,  187,  203,  193,  180,  204,  247,
      205,  206,  154,  184,  185,  154,  208,  149,  207,  188,
      211,  189,  214,  145,  142,  215,  190,  186,  191,  192,
      218,  187,  203,  193,  194,  204,  195,  205,  206,  196,
      197,  209,  198,  208,  199,  207,  216,  211,  212,  214,
      200,  201,  215,  202,  217,  219,  210,  218,  213,  151,
      220,  194,  220,  195,  225,  221,  196,  197,  209,  198,
      222,  199,  226,  216,  223,  212,  223,  200,  201,  224,
      202,  217,  219,  210,  227,  213,  228,  229,  230,  231,
      232,  225,  233,  234,  235,  236,  237,  222,  238,  226,

      239,  240,  241,  242,  243,  244,  245,  246,  248,  249,
      250,  227,  251,  228,  229,  230,  231,  232,  252,  233,
      234,  235,  236,  237,  253,  238,  254,  239,  240,  241,
      242,  243,  244,  245,  246,  248,  249,  250,  255,  251,
      256,  257,  258,  259,  260,  252,  261,  262,  263,  265,
      266,  253,  267,  254,  264,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  278,  255,  279,  256,  257,  258,
      259,  260,  280,  261,  262,  263,  265,  266,  281,  267,
      282,  264,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  278,  283,  279,  284,  285,  286,  287,  288,  280,

      289,  290,  292,  290,  293,  281,  291,  282,  294,  295,
      296,  297,  298,  299,  300,  301,  302,  304,  305,  283,
      303,  284,  285,  286,  287,  288,  306,  289,  307,  292,
      308,  293,  309,  310,  247,  294,  295,  296,  297,  298,
      299,  300,  301,  302,  304,  305,  313,  303,  314,  315,
      149,  316,  317,  306,  318,  307,  319,  308,  320,  309,
      310,  321,  322,  323,  324,  325,  326,  327,  328,  329,
      330,  331,  332,  313,  311,  314,  315,  312,  316,  317,
      333,  318,  334,  319,  335,  320,  336,  338,  321,  322,
      323,  324,  325,  326,  327,  328,  329,  330,  331,  332,

      277,  311,  339,  340,  312,  341,  342,  333,  343,  334,
      344,  335,  345,  336,  338,  346,  347,  348,  350,  351,
      352,  353,  337,  354,  355,  356,  357,  358,  359,  339,
      340,  360,  341,  342,  361,  343,  362,  344,  363,  345,
      364,  365,  346,  347,  348,  350,  351,  352,  353,  366,
      354,  355,  356,  357,  358,  359,  367,  368,  360,  369,
      370,  361,  371,  362,  372,  363,  373,  364,  365,  374,
      375,  376,  377,  378,  379,  380,  366,  381,  382,  383,
      384,  385,  386,  367,  368,  387,  369,  370,  388,  371,
      389,  372,  349,  373,  392,  393,  374,  375,  376,  377,

      378,  379,  380,  394,  381,  382,  383,  384,  385,  386,
      395,  396,  387,  397,  398,  388,  399,  389,  400,  401,
      402,  392,  393,  403,  404,  405,  406,  407,  408,  409,
      394,  410,  390,  411,  412,  391,  413,  395,  396,  414,
      397,  398,  415,  399,  416,  400,  401,  402,  417,  418,
      403,  404,  405,  406,  407,  408,  409,  419,  410,  390,
      411,  412,  391,  413,  420,  421,  414,  423,  424,  415,
      425,  416,  426,  427,  428,  417,  418,  429,  430,  431,
      432,  433,  434,  146,  419,  436,  437,  438,  422,  439,
      440,  420,  421,  441,  423,  424,  442,  425,  145,  426,

      427,  428,  143,   82,  429,  430,  431,  432,  433,  434,
      435,  142,  436,  437,  438,  140,  439,  440,  139,   93,
      441,   88,   84,  442,   57,   57,   57,   57,   61,   61,
       61,   61,   71,   71,   71,   71,   75,   75,   75,   75,
      141,  141,  144,  144,  147,   83,  147,  147,  148,  148,
      148,  148,   82,   81,  443,   11,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443
    } ;

static const flex_int16_t yy_chk[935] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        3,    4,    7,   13,    7,   13,    7,    3,    4,    5,
        8,    5,    8,    5,    8,    5,    5,    5,    9,  448,

        9,    5,  399,    5,    9,    6,    5,    6,   10,    6,
       10,    6,    6,    6,   10,   33,   26,    6,   26,    6,
       29,   34,    6,   80,   33,   80,   33,  296,  291,   26,
       33,   29,   34,   42,   29,   29,  290,   35,   37,   38,
       37,  224,   33,   38,   35,    9,  223,   35,   34,   37,
       35,   33,   35,   33,   36,   10,   26,   33,   36,   34,
       42,   39,   36,   39,   35,   37,   38,   37,   40,   36,
       38,   35,   43,   41,   35,   40,   37,   35,   41,   35,
       44,   36,   45,  221,   46,   36,   50,   83,   39,   36,
       39,   46,   49,   46,   49,   40,   36,   47,   83,   43,

       41,   47,   40,   48,   47,   41,   85,   44,   51,   45,
       48,   46,  220,   50,   47,   51,   95,   85,   46,   49,
       46,   49,   96,   97,   47,   83,   97,   86,   47,   86,
       48,   47,   98,   99,   87,   51,   87,   48,  100,   87,
       86,   47,   51,   95,   85,  101,  102,  103,  105,   96,
       97,  106,  103,   97,  104,  104,  104,  108,  104,   98,
       99,  107,  109,  107,  110,  100,  111,   86,  113,  114,
      112,  107,  101,  102,  103,  105,  116,  207,  106,  103,
      112,  104,  104,  104,  108,  104,  118,  118,  107,  109,
      107,  110,  120,  111,  120,  113,  114,  112,  107,  121,

      119,  122,  124,  116,  119,  126,  124,  112,  127,  178,
      128,  129,  154,  118,  118,  153,  130,  148,  129,  120,
      132,  120,  134,  144,  141,  135,  121,  119,  122,  124,
      137,  119,  126,  124,  125,  127,  125,  128,  129,  125,
      125,  131,  125,  130,  125,  129,  136,  132,  133,  134,
      125,  125,  135,  125,  136,  138,  131,  137,  133,  151,
      150,  125,  150,  125,  155,  150,  125,  125,  131,  125,
      151,  125,  156,  136,  152,  133,  152,  125,  125,  152,
      125,  136,  138,  131,  157,  133,  159,  160,  161,  162,
      163,  155,  164,  165,  166,  167,  168,  151,  169,  156,

      170,  171,  172,  173,  174,  175,  176,  177,  179,  180,
      181,  157,  182,  159,  160,  161,  162,  163,  183,  164,
      165,  166,  167,  168,  184,  169,  185,  170,  171,  172,
      173,  174,  175,  176,  177,  179,  180,  181,  186,  182,
      187,  188,  189,  190,  191,  183,  192,  193,  194,  195,
      196,  184,  197,  185,  194,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  208,  186,  209,  187,  188,  189,
      190,  191,  210,  192,  193,  194,  195,  196,  211,  197,
      212,  194,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  208,  213,  209,  214,  215,  216,  217,  218,  210,

      219,  222,  225,  222,  226,  211,  222,  212,  227,  228,
      229,  230,  232,  233,  234,  235,  236,  237,  239,  213,
      236,  214,  215,  216,  217,  218,  240,  219,  241,  225,
      242,  226,  243,  244,  247,  227,  228,  229,  230,  232,
      233,  234,  235,  236,  237,  239,  248,  236,  249,  250,
       82,  252,  253,  240,  254,  241,  255,  242,  256,  243,
      244,  260,  261,  262,  264,  265,  266,  267,  268,  269,
      270,  271,  272,  248,  247,  249,  250,  247,  252,  253,
      273,  254,  274,  255,  275,  256,  276,  279,  260,  261,
      262,  264,  265,  266,  267,  268,  269,  270,  271,  272,

      277,  247,  280,  283,  247,  284,  285,  273,  286,  274,
      287,  275,  288,  276,  279,  289,  294,  295,  298,  300,
      301,  302,  277,  303,  304,  305,  306,  307,  308,  280,
      283,  309,  284,  285,  310,  286,  311,  287,  312,  288,
      313,  314,  289,  294,  295,  298,  300,  301,  302,  317,
      303,  304,  305,  306,  307,  308,  318,  320,  309,  321,
      322,  310,  324,  311,  325,  312,  326,  313,  314,  328,
      329,  331,  332,  333,  334,  335,  317,  336,  339,  340,
      341,  342,  343,  318,  320,  344,  321,  322,  345,  324,
      347,  325,  349,  326,  350,  351,  328,  329,  331,  332,

      333,  334,  335,  352,  336,  339,  340,  341,  342,  343,
      353,  355,  344,  357,  358,  345,  359,  347,  361,  362,
      363,  350,  351,  364,  365,  367,  370,  371,  373,  374,
      352,  375,  349,  379,  380,  349,  383,  353,  355,  384,
      357,  358,  388,  359,  390,  361,  362,  363,  391,  392,
      364,  365,  367,  370,  371,  373,  374,  396,  375,  349,
      379,  380,  349,  383,  397,  398,  384,  401,  402,  388,
      407,  390,  408,  411,  412,  391,  392,  413,  414,  416,
      417,  418,  421,   78,  396,  423,  426,  428,  422,  431,
      432,  397,  398,  433,  401,  402,  434,  407,   74,  408,

      411,  412,   69,   68,  413,  414,  416,  417,  418,  421,
      422,   64,  423,  426,  428,   60,  431,  432,   56,   31,
      433,   27,   25,  434,  444,  444,  444,  444,  445,  445,
      445,  445,  446,  446,  446,  446,  447,  447,  447,  447,
      449,  449,  450,  450,  451,   24,  451,  451,  452,  452,
      452,  452,   23,   16,   11,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pgscript/pgsScanner.ll"
#line 6 "pgscript/pgsScanner.ll"

//////////////////////////////////////////////////////////////////////////
//
// pgScript - PostgreSQL Tools
// 
// Copyright (C) 2002 - 2016, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////////////////

#include "pgscript/pgScript.h"
#include "pgscript/parser.tab.hh"
#include "pgscript/utilities/pgsScanner.h"

/* Import the parser's token type into a local typedef */
typedef pgscript::pgsParser::token token;
typedef pgscript::pgsParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
//#undef	yywrap
//#define	yywrap()	1

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::PGS_END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 804 "pgscript/lex.pgs.cc"
/*** Flex Declarations and Options ***/
/* Enable C++ scanner class generation */
/* Change the name of the scanner class. Results in "pgsFlexLexer" */
/* Case insensitive */
/* The manual says "somewhat more optimized" */
/* Prevent isatty warning in VC++ */
/* For using start conditions */
/* No support for include files is planned */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 66 "pgscript/pgsScanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 817 "pgscript/lex.pgs.cc"

#line 819 "pgscript/lex.pgs.cc"

#define INITIAL 0
#define SC_COMMENT 1
#define SC_QUERY 2
#define SC_DOLLAR 3
#define SC_STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 74 "pgscript/pgsScanner.ll"


#line 77 "pgscript/pgsScanner.ll"
 /* Code to place at the beginning of yylex() */

	// Reset location
	yylloc->step();


#line 965 "pgscript/lex.pgs.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 444 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 443 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 83 "pgscript/pgsScanner.ll"
{ /* Ignore SQL comment */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 84 "pgscript/pgsScanner.ll"
{ comment_caller = INITIAL; BEGIN(SC_COMMENT); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "pgscript/pgsScanner.ll"
{ comment_caller = SC_QUERY; BEGIN(SC_COMMENT); }
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 88 "pgscript/pgsScanner.ll"
{ return token::PGS_WHILE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 89 "pgscript/pgsScanner.ll"
{ return token::PGS_BREAK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 90 "pgscript/pgsScanner.ll"
{ return token::PGS_RETURN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "pgscript/pgsScanner.ll"
{ return token::PGS_CONTINUE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "pgscript/pgsScanner.ll"
{ return token::PGS_IF; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "pgscript/pgsScanner.ll"
{ return token::PGS_ELSE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "pgscript/pgsScanner.ll"
{ return token::PGS_WAITFOR; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "pgscript/pgsScanner.ll"
{ return token::PGS_AS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "pgscript/pgsScanner.ll"
{ return token::PGS_ASSERT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "pgscript/pgsScanner.ll"
{ /* Ignore it */ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 99 "pgscript/pgsScanner.ll"
{ return token::PGS_PRINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 101 "pgscript/pgsScanner.ll"
{ return token::PGS_CNT_COLUMNS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 102 "pgscript/pgsScanner.ll"
{ return token::PGS_CNT_LINES; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 103 "pgscript/pgsScanner.ll"
{ return token::PGS_TRIM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 104 "pgscript/pgsScanner.ll"
{ return token::PGS_RM_LINE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 105 "pgscript/pgsScanner.ll"
{ return token::PGS_CAST; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "pgscript/pgsScanner.ll"
{ return token::PGS_RECORD; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "pgscript/pgsScanner.ll"
{ return token::PGS_INTEGER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "pgscript/pgsScanner.ll"
{ return token::PGS_REAL; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 111 "pgscript/pgsScanner.ll"
{ return token::PGS_STRING; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 112 "pgscript/pgsScanner.ll"
{ return token::PGS_REGEX; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 113 "pgscript/pgsScanner.ll"
{ return token::PGS_FILE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 114 "pgscript/pgsScanner.ll"
{ return token::PGS_DATE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 115 "pgscript/pgsScanner.ll"
{ return token::PGS_TIME; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 116 "pgscript/pgsScanner.ll"
{ return token::PGS_DATE_TIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "pgscript/pgsScanner.ll"
{ return token::PGS_REFERENCE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "pgscript/pgsScanner.ll"
{ unput('@'); yylloc->end.columns(-1);
					  return token::PGS_SET_ASSIGN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "pgscript/pgsScanner.ll"
{ unput('@'); yylloc->end.columns(-1);
					  return token::PGS_DECLARE_ASSGN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 125 "pgscript/pgsScanner.ll"
{ /* Block opening */ return token::PGS_OPEN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 126 "pgscript/pgsScanner.ll"
{ /* Block closing */ return token::PGS_CLOSE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(yytext, m_conv);
					  return token::PGS_IDENTIFIER; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 131 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(yytext, m_conv);
					  return token::PGS_VAL_INT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(yytext, m_conv);
					  return token::PGS_VAL_REAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(yytext, m_conv);
					  return token::PGS_VAL_REAL; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(yytext, m_conv);
					  return token::PGS_VAL_REAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 141 "pgscript/pgsScanner.ll"
{ return token::PGS_AND_OP; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 142 "pgscript/pgsScanner.ll"
{ return token::PGS_OR_OP; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "pgscript/pgsScanner.ll"
{ return token::PGS_LE_OP; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 144 "pgscript/pgsScanner.ll"
{ return token::PGS_GE_OP; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "pgscript/pgsScanner.ll"
{ return token::PGS_EQ_OP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 146 "pgscript/pgsScanner.ll"
{ return token::PGS_AE_OP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "pgscript/pgsScanner.ll"
{ return token::PGS_NE_OP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 148 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, ';'); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 149 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '{'); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 150 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '}'); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, ':'); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '('); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 153 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, ')'); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 154 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '['); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, ']'); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 156 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '.'); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 157 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, ','); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "pgscript/pgsScanner.ll"
{ return token::PGS_NOT_OP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '-'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '+'); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '*'); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '/'); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 163 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '%'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 164 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '<'); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 165 "pgscript/pgsScanner.ll"
{ return wx_static_cast(token_type, '>'); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 167 "pgscript/pgsScanner.ll"
{ string_caller = INITIAL; BEGIN(SC_STRING); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_ABORT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_ALTER;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_ANALYZE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_BEGIN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 177 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_BEGIN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_CHECKPOINT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 181 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_CLOSE_ST;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 183 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_CLUSTER;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 185 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_COMMENT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 187 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_COMMIT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 189 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_COPY;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 191 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_CREATE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_DEALLOCATE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 195 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_DECLARE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 197 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_DELETE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 199 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_DISCARD;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 201 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_DROP;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 203 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_END_ST;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 205 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_END_ST;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 207 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_EXECUTE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 209 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_EXPLAIN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 211 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_FETCH;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_GRANT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 215 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_INSERT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 217 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_LISTEN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 219 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_LOAD;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 221 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_LOCK;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_MOVE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 225 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_NOTIFY;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 227 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_PREPARE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 229 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_REASSIGN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 231 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_REINDEX;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_RELEASE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 235 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_RESET;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 237 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_REVOKE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 239 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_ROLLBACK;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 241 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_SAVEPOINT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 243 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_SELECT;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 245 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_SET;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 247 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_SHOW;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 249 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_START;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 251 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_TRUNCATE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 253 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_UNLISTEN;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 255 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_UPDATE;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 257 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_VACUUM;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 259 "pgscript/pgsScanner.ll"
{ query += yytext; query_token = token::PGS_VALUES;
					  BEGIN(SC_QUERY); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 262 "pgscript/pgsScanner.ll"
{ }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 263 "pgscript/pgsScanner.ll"
{ yylloc->step(); }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 264 "pgscript/pgsScanner.ll"
{ yylloc->lines(yyleng); yylloc->step(); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 265 "pgscript/pgsScanner.ll"
{ return token::PGS_UNKNOWN; }
	YY_BREAK


case 115:
YY_RULE_SETUP
#line 269 "pgscript/pgsScanner.ll"
{ query += yytext; string_caller = SC_QUERY; BEGIN(SC_STRING); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 270 "pgscript/pgsScanner.ll"
{ query += yytext; dollar = yytext; BEGIN(SC_DOLLAR); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 271 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(query.c_str(), m_conv);
					  query.clear(); unput(';'); yylloc->end.columns(-1);
					  BEGIN(INITIAL); m_parent = 0; return query_token; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 274 "pgscript/pgsScanner.ll"
{ ++m_parent; query += yytext; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 275 "pgscript/pgsScanner.ll"
{
						--m_parent;
						if (m_parent == -1)
						{
							yylval->str = pnew wxString(query.c_str(), m_conv);
							query.clear(); unput(')'); yylloc->end.columns(-1);
							BEGIN(INITIAL); m_parent = 0; return query_token;
						}
						else
						{
							query += yytext;
						}
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 288 "pgscript/pgsScanner.ll"
{ query += yytext; yylloc->step(); }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 289 "pgscript/pgsScanner.ll"
{ query += yytext; yylloc->lines(yyleng); yylloc->step(); }
	YY_BREAK
case YY_STATE_EOF(SC_QUERY):
#line 290 "pgscript/pgsScanner.ll"
{ yylval->str = pnew wxString(query.c_str(), m_conv);
					  query.clear(); m_parent = 0; return query_token; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 292 "pgscript/pgsScanner.ll"
{ yylloc->columns(columns(*yytext)); query += yytext; }
	YY_BREAK


case 123:
YY_RULE_SETUP
#line 296 "pgscript/pgsScanner.ll"
{ query += yytext;
					  if (std::string(yytext) == dollar) BEGIN(SC_QUERY); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 298 "pgscript/pgsScanner.ll"
{ query += yytext; yylloc->step(); }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 299 "pgscript/pgsScanner.ll"
{ query += yytext; yylloc->lines(yyleng); yylloc->step(); }
	YY_BREAK
case YY_STATE_EOF(SC_DOLLAR):
#line 300 "pgscript/pgsScanner.ll"
{ query += yytext; yylval->str = pnew wxString(query.c_str(), m_conv);
					  query.clear(); m_parent = 0; return query_token; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 302 "pgscript/pgsScanner.ll"
{ yylloc->columns(columns(*yytext)); query += yytext; }
	YY_BREAK


case 127:
YY_RULE_SETUP
#line 306 "pgscript/pgsScanner.ll"
{ BEGIN(comment_caller); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 307 "pgscript/pgsScanner.ll"
{ yylloc->step(); }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 308 "pgscript/pgsScanner.ll"
{ yylloc->lines(yyleng); yylloc->step(); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 309 "pgscript/pgsScanner.ll"
{ yylloc->columns(columns(*yytext)); }
	YY_BREAK


case 131:
YY_RULE_SETUP
#line 313 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
							query += yytext;
						else
							str += "'";
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 319 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
							query += yytext;
						else
							str += *(yytext + 1);
						yylloc->columns(columns(*(yytext + 1)));
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 326 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
						{
							query += yytext;
							BEGIN(string_caller);
						}
						else
						{
							yylval->str = pnew wxString(str.c_str(), m_conv);
							str.clear();
							BEGIN(string_caller);
							return token::PGS_VAL_STR;
						}
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 340 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
							query += yytext;
						else
							str += yytext;
						yylloc->step();
					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 347 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
							query += yytext;
						else
							str += yytext;
						yylloc->lines(yyleng); yylloc->step();
					}
	YY_BREAK
case YY_STATE_EOF(SC_STRING):
#line 354 "pgscript/pgsScanner.ll"
{
						if (string_caller == SC_QUERY)
						{
							query += yytext; yylval->str = pnew wxString(query.c_str(), m_conv);
							query.clear(); m_parent = 0; return query_token;
						}
						else
						{
							yylval->str = pnew wxString(str.c_str(), m_conv);
							str.clear();
							BEGIN(string_caller);
							return token::PGS_VAL_STR;
						}
					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 368 "pgscript/pgsScanner.ll"
{ 
						if (string_caller == SC_QUERY)
							query += yytext;
						else
							str += yytext;
						yylloc->columns(columns(*yytext));
					}
	YY_BREAK

case 137:
YY_RULE_SETUP
#line 377 "pgscript/pgsScanner.ll"
ECHO;
	YY_BREAK
#line 1858 "pgscript/lex.pgs.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SC_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 444 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 444 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 443);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 377 "pgscript/pgsScanner.ll"


namespace pgscript
{

pgsScanner::pgsScanner(wxMBConv & conv, std::istream * in, std::ostream * out) :
	pgsFlexLexer(in, out), m_parent(0), m_conv(conv)
{

}

pgsScanner::~pgsScanner()
{

}

void pgsScanner::set_debug(bool b)
{
	yy_flex_debug = b;
}

int pgsScanner::columns(const char & c)
{
	if ((c & 0xF0) == 0xF0) // 4 bytes
		return -3;
	else if ((c & 0xE0) == 0xE0) // 3 bytes
		return -2;
	else if ((c & 0xC0) == 0xC0) // 2 bytes
		return -1;
	else return 0;
}

}

/* This implementation of pgsFlexLexer::yylex() is required to fill the
 * vtable of the class pgsFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the pgsScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int pgsFlexLexer::yylex()
{
	return 0;
}

